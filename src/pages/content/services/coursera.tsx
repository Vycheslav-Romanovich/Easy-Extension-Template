import { getLanguageName } from '../../../constants/supportedLanguages'
import { SubsLinksType } from '../../../constants/types'
import { ready } from '../ready'
import { updateSubs, updateTranslatedSubs } from './../events'
import Subs from '../subs'
import axios from 'axios'

class Coursera {
  constructor() {
    this.injectScript = this.injectScript.bind(this)
  }

  public init(): void {
    ready('video', this.injectScript)
  }

  public async getSubs(language: string, locale: string, id: string): Promise<Array<SubsLinksType> | undefined> {
    let currentCourseraLang = 'en'

    const tracks = document.querySelector('video')?.textTracks
    const subList: Array<SubsLinksType> = []
    if (tracks) {
      for (let i = 0, L = tracks.length; i < L; i++) {
        if (tracks[i].language.includes(language)) {
          currentCourseraLang = tracks[i].language
        }

        subList.push({
          langCode: tracks[i].language,
          langName: getLanguageName(tracks[i].language, locale) + tracks[i].language.substr(2),
        })
      }
    }

    const track: HTMLTrackElement | null = document.querySelector(`track[srclang="${currentCourseraLang}"]`)

    if (!track) {
      console.error(`Can't find track with lang=${currentCourseraLang}`)
      return []
    }

    const subUri: string = track.src
    const resp = await axios.get(subUri);
    const data = resp.data

    updateSubs({
      url: '',
      synchronized: false,
      videoId: id,
      languageCode: language,
      languageName: getLanguageName(language, locale),
      autogenerated: false,
      text: Subs.ProcessSubs(data),
      isAutoGenerated: false,
    })

    const finalSubList = subList.filter((item) => !item.langName.includes('unknown'))

    return finalSubList
  }

  public async getTranslatedSubs(languageCode: string, locale: string, coursereVideoId: string) {
    let currentCourseraTranslateLang = 'en'

    const tracks = document.querySelector('video')?.textTracks
    const subList: Array<SubsLinksType> = []
    if (tracks) {
      for (let i = 0, L = tracks.length; i < L; i++) {
        if (tracks[i].language.includes(languageCode)) {
          currentCourseraTranslateLang = tracks[i].language
        }

        subList.push({
          langCode: tracks[i].language,
          langName: getLanguageName(tracks[i].language, locale) + tracks[i].language.substr(2),
        })
      }
    }

    const track: HTMLTrackElement | null = document.querySelector(`track[srclang="${currentCourseraTranslateLang}"]`)

    if (!track) {
      console.error(`Can't find track with lang=${currentCourseraTranslateLang}`)
      return []
    }

    const subUri: string = track.src
    const resp = await axios.get(subUri);
    const data = resp.data

    updateTranslatedSubs({
      url: '',
      synchronized: false,
      videoId: coursereVideoId,
      languageCode: languageCode,
      languageName: getLanguageName(languageCode, locale),
      autogenerated: false,
      text: Subs.ProcessSubs(data),
      isAutoGenerated: false,
    })
  }

  private injection = () => {
    function getLanguage(playerInstance: any) {
      return playerInstance.currentTrack()?.language || ''
    }

    const player = (document.querySelector('.video-js') as any).player
    // console.log('player', player.options_.itemId)

    window.dispatchEvent(new CustomEvent('elangSubsVideoReady'))

    player.on('loadeddata', () => {
      window.dispatchEvent(
        new CustomEvent('elangSubtitlesChanged', { detail: { lang: getLanguage(player), courseraVideoId: player.options_.itemId } })
      )
      //   window.dispatchEvent(new CustomEvent('easysubsRenderSettings'))
    })
  }

  private injectScript() {
    const sc = document.createElement('script')
    sc.innerHTML = `(${this.injection.toString()})()`
    document.head.appendChild(sc)
    document.head.removeChild(sc)
  }
}

export default Coursera
