import { ReactChild, ReactFragment, ReactPortal } from 'react'

export type Source = 'Youtube' | 'Netflix'
export type OnClickHandler = ((event: React.MouseEvent<any>) => void) | undefined
export type OnUpdateHandler = ((event: React.ChangeEvent<HTMLInputElement>) => void) | undefined
export type OnFocusHandler = ((event: React.FocusEvent<HTMLInputElement>) => void) | undefined
export type SubtitleColors = '#FFFFFF' | '#4F6EFD' | '#faff15' | '#EFA30E' | '#18E0D4' | '#EDEEF2'
export type WayToOpenTextTranslation = 'immediately' | 'withButton'
export type ActiveServiceTab = 'subtitles' | 'vocabulary' | 'practise' | 'premium' | 'products'
export type PaymentStatus = 'Processed' | 'Waiting' | 'Canceled' | 'Chargeback' | 'Refunded'
export type PhrasesObj = { [key: string]: PhraseVocabularyElement };
export type WordsObj = { [key: string]: WordVocabularyElement };

export type SubtitleLine = {
  id: number
  startTime: number
  endTime: number
  text: string
}

export type VideoWord = {
  word: string
  translate: string
  data?: PopupData,
}

export type AllVideoWords = {
  [key: string]: VideoWord
}

export type ICheckList = {
  keyValue: string
  isDone: boolean
  text: string
  animation: any
}

export type VideoServiceVocabularyElement = {
  word: string
  translate: string
  isPhrase: boolean
  timestamp: number
}

export type PartOfSpeech = {
  frequency: number
  synonyms: Array<string>
  translation: string
}

export type IHistoryTranslatedWords = {
  link: string
  synonyms: Array<string>
  allPartOfSpeech: Array<Array<PartOfSpeech>>
  example: Array<string>
  partOfSpeech: string
  timestamp: number
  transcription: string
  translate: string
  word: string
  historyPhrases: string
  learningLanguageCode: string
}

export type PopupData = {
  synoyms: Array<string>
  allPartOfSpeech: Array<Array<PartOfSpeech>>
  example: Array<string>
  partOfSpeech: string
  transcription: string
  translation: string
  word: string
}

export interface IAnalyticsEvent {
  category: string
  action: string
  label?: string
}

export interface IAnalyticsCustomeEvent {
  dimension: string
  value: string
}

export type Subtitle = {
  url: string
  synchronized: boolean
  videoId: string | null
  languageCode: string | null
  languageName: string | null
  autogenerated: boolean | null
  text: SubtitleLine[] | null
  isAutoGenerated: boolean
}

export type Video = {
  url: string | null
  id: string | null
  source: Source | null
  length: number | null
  captions: Array<Subtitle> | null
}

export interface subTitleType {
  start: number | string
  end: number | string
  text: string
  setting?: string
  langName?: string
}

export interface SubsLinksType {
  [key: string]: string
}

interface IPersonalSubDate {
  orderCustomerTime: number
  isTrialPeriod: string
}

interface IAllSubDate {
  [key: number]: IPersonalSubDate
}

export interface IPaymentData {
  chargeDate: number;
  email: string;
  paymentMethodName: string;
  subscriptionId: number;
  subscriptionType: string;
  isSubscriptionFinished?: boolean;
  allSubscriptionDate: IAllSubDate;
  isTrialPeriod: string;
  trialPeriodTill: number | string;
  orderPrice: number | string;
  nextChargeAmount: string;
  nextChargeCurrency: string;
  orderStatus: PaymentStatus;
}

export type SettingsAccountType = {
  interfaceLang: 'ru' | 'en' | 'de' | 'es' | 'tr' | 'pl' | 'ja' | 'ko' | 'uk' | 'fr' | 'zhHans'
  learningLang: string
  localLang: string
  wayToOpenTextTranslation: WayToOpenTextTranslation
}

export type WordHistoryElement = {
  link: string
  synonyms: Array<string>
  allPartOfSpeech: Array<Array<PartOfSpeech>>
  example: Array<string>
  cardWordShow: boolean
  historyPhrase: string
  partOfSpeech: string
  timestamp: number
  transcription: string
  translate: string
  word: string
  checkedForDelete: boolean
  phrase?: string
  learningLanguageCode: string
  isPracticeWord?: boolean
}

export type MatchPracticeData = {
  id: number
  word: string
  wordData: WordVocabularyElement
}

export type WordVocabularyElement = {
  link: string;
  synonyms: Array<string>;
  allPartOfSpeech: Array<Array<PartOfSpeech>>;
  example: Array<string>;
  cardWordShow: boolean;
  partOfSpeech: string;
  timestamp: number;
  transcription: string;
  translate: string;
  word: string;
  checkedForDelete: boolean;
  isPracticeWord?: boolean;
  learningLanguageCode: string;
  phrase?: string;
  memoryScale?: 0 | 1 | 2 | 3 | 4 | 5;
};

export type PhraseVocabularyElement = {
  link: string;
  cardWordShow: boolean;
  timestamp: number;
  translate: string;
  phrase: string;
  checkedForDelete: boolean;
  learningLanguageCode: string;
  word?: string;
  memoryScale?: 0 | 1 | 2 | 3 | 4 | 5;
}

export type SendReqFinishedSubscriptionAxios = {
  uid: string;
  subscriptionId: number;
};

export type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined

export type PracticeInfo = {
  lastPracticed: number;
  streak: number;
  termsCountDaily: number;
}

export type notificationType = {
  notificationId: string
  typeNotification: string
  options: {
    type: string
    title: string
    message: string
    iconUrl: string
  }
}
